# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Application
GET            /                                           controllers.Application.index

OPTIONS        /api/*url                                   controllers.Api.allowCORSAccess(methods = "PUT, POST, DELETE", url: String)

GET            /dashboard                                  controllers.Application.dashboard

#static user pages
GET            /about                                      controllers.Assets.at(path="/public", file="/static/about.html")
GET            /editorialSupport                           controllers.Application.editorialSupport
GET            /faqs                                       controllers.Application.faqs
GET            /troubleshooting                            controllers.Application.troubleshooting
GET            /training                                   controllers.Application.training

# Login
GET            /oauthCallback                              controllers.Login.oauthCallback
GET            /login/status                               controllers.Login.status
GET            /logout                                     controllers.Login.logout

# API

GET            /api/content                                controllers.Api.content
POST           /api/content                                controllers.Api.createContent
GET            /api/content/:composerId                    controllers.Api.getContentByComposerId(composerId: String)
PUT            /api/content/:composerId/status             controllers.Api.putStubStatusByComposerId(composerId: String)
DELETE         /api/content/:composerId                    controllers.Api.deleteContent(composerId: String)

POST           /api/stubs                                  controllers.Api.createContent
PUT            /api/stubs/:stubId                          controllers.Api.putStub(stubId: Long)
PUT            /api/stubs/:stubId/assignee                 controllers.Api.putStubAssignee(stubId: Long)
PUT            /api/stubs/:stubId/assigneeEmail            controllers.Api.putStubAssigneeEmail(stubId: Long)
PUT            /api/stubs/:stubId/dueDate                  controllers.Api.putStubDueDate(stubId: Long)
PUT            /api/stubs/:stubId/note                     controllers.Api.putStubNote(stubId: Long)
PUT            /api/stubs/:stubId/needsLegal               controllers.Api.putStubLegalStatus(stubId: Long)
PUT            /api/stubs/:stubId/prodOffice               controllers.Api.putStubProdOffice(stubId: Long)
PUT            /api/stubs/:stubId/section                  controllers.Api.putStubSection(stubId: Long)
PUT            /api/stubs/:stubId/workingTitle             controllers.Api.putStubWorkingTitle(stubId: Long)
PUT            /api/stubs/:stubId/priority                 controllers.Api.putStubPriority(stubId: Long)
PUT            /api/stubs/:stubId/trashed                  controllers.Api.putStubTrashed(stubId: Long)
PUT            /api/stubs/:stubId/status                   controllers.Api.putStubStatus(stubId: Long)
DELETE         /api/stubs/:stubId                          controllers.Api.deleteStub(stubId: Long)

GET            /api/statuses                               controllers.Api.statusus
GET            /api/sections                               controllers.Api.sections
GET            /api/allowedAtomTypes                       controllers.Api.allowedAtomTypes

GET            /api/editorialSupportTeams                  controllers.Api.editorialSupportTeams
PUT            /api/editorialSupportTeams                  controllers.Api.addEditorialSupportStaff(name, team)
DELETE         /api/editorialSupportTeams                  controllers.Api.deleteEditorialSupportStaff(name, team)
POST           /api/editorialSupportTeams/toggle           controllers.Api.toggleEditorialSupportStaff(id, active)
POST           /api/editorialSupportTeams/update           controllers.Api.updateEditorialSupportStaffDescription(id, description)

# CAPI
GET            /capi/*path                                 controllers.CAPIService.previewCapiProxy(path)

# Atoms
GET            /api/atom/:editorId                         controllers.Api.getContentByEditorId(editorId: String)

# Admin
GET            /admin                                      controllers.Admin.index
GET            /admin/desks-and-sections                   controllers.Admin.desksAndSections(selectedDesk: Option[Long])

POST           /admin/sections                             controllers.Admin.addSection
DELETE         /admin/sections                             controllers.Admin.removeSection

POST           /admin/desks                                controllers.Admin.addDesk
DELETE         /admin/desks                                controllers.Admin.removeDesk

POST           /admin/assign                               controllers.Admin.assignSectionToDesk

# Admin (section,tag) mappings
GET            /admin/sections-and-tags                    controllers.Admin.sectionsAndTags(selectedSection: Option[Long])
POST           /admin/sectiontag                           controllers.Admin.addSectionTag
POST           /admin/sectiontag/delete                    controllers.Admin.removeSectionTag

# feature-switching based enpoinds
GET            /feature/:featureName                       controllers.Feature.featureSwitchToggle(featureName)
GET            /feature/:featureName/on                    controllers.Feature.featureSwitchOn(featureName)
GET            /feature/:featureName/off                   controllers.Feature.featureSwitchOff(featureName)

# shared secret auth test
GET            /sharedsecret/content                       controllers.Api.sharedAuthGetContent
GET            /sharedsecret/content/:id                   controllers.Api.sharedAuthGetContentById(id)

# Support
POST            /support/logger                            controllers.Support.logger

# Management
GET            /management/healthcheck                     controllers.Management.healthCheck

# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                               controllers.Assets.versioned(path="/public", file: Asset)
