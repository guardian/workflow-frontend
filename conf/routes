# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Application
GET            /                                      controllers.Application.index

OPTIONS        /api/*url                              controllers.Api.allowCORSAccess(methods = "PUT, POST", url: String)

GET            /dashboard                             controllers.Application.dashboard

#static user pages
GET            /about                                 controllers.Application.about
GET            /faqs                                  controllers.Application.faqs

# Login
GET            /oauthCallback                         controllers.Login.oauthCallback
GET            /login/status                          controllers.Login.status
GET            /logout                                controllers.Login.logout

# API

GET            /api/content                           controllers.Api.content
POST           /api/content                           controllers.Api.createContent
GET            /api/content/:composerId               controllers.Api.getContentbyId(composerId: String)
PUT            /api/content/:composerId/status        controllers.Api.putContentStatus(composerId: String)
DELETE         /api/content/:composerId               controllers.Api.deleteContent(composerId: String)

GET            /api/content/search/:patt              controllers.Api.contentSearch(patt)

GET            /api/stubs                             controllers.Api.stubs
POST           /api/stubs                             controllers.Api.createContent
PUT            /api/stubs/:stubId                     controllers.Api.putStub(stubId: Long)
PUT            /api/stubs/:stubId/assignee            controllers.Api.putStubAssignee(stubId: Long)
PUT            /api/stubs/:stubId/assigneeEmail       controllers.Api.putStubAssigneeEmail(stubId: Long)
PUT            /api/stubs/:stubId/dueDate             controllers.Api.putStubDueDate(stubId: Long)
PUT            /api/stubs/:stubId/note                controllers.Api.putStubNote(stubId: Long)
PUT            /api/stubs/:stubId/needsLegal          controllers.Api.putStubLegalStatus(stubId: Long)
PUT            /api/stubs/:stubId/prodOffice          controllers.Api.putStubProdOffice(stubId: Long)
PUT            /api/stubs/:stubId/section             controllers.Api.putStubSection(stubId: Long)
PUT            /api/stubs/:stubId/workingTitle        controllers.Api.putStubWorkingTitle(stubId: Long)
PUT            /api/stubs/:stubId/priority            controllers.Api.putStubPriority(stubId: Long)
DELETE         /api/stubs/:stubId                     controllers.Api.deleteStub(stubId: Long)

GET            /api/statuses                          controllers.Api.statusus
GET            /api/sections                          controllers.Api.sections

# API V1

# Content
GET            /api/v1/content                        controllers.ContentApi.content
GET            /api/v1/content/:id                    controllers.ContentApi.contentById(id: String)
POST           /api/v1/content                        controllers.ContentApi.createContent
PUT            /api/v1/content/:id                    controllers.ContentApi.modifyContent(id: Long)
DELETE         /api/v1/content/:id                    controllers.ContentApi.deleteContent(id: Long)

#Archive
GET            /api/v1/archive/:id                    controllers.ArchiveApi.contentById(id: Long)
GET            /api/v1/archive/:id/restore            controllers.ArchiveApi.restoreById(id: Long)

#Swagger
GET            /api/v1/docs                           controllers.ApiHelpController.getResources
GET            /api/v1/docs/content                   controllers.ApiHelpController.getResource(path = "/content")
GET            /api/v1/docs/archive                   controllers.ApiHelpController.getResource(path = "/archive")

# Admin
GET            /admin                                 controllers.Admin.index(selectedDesk: Option[Long])
GET            /admin/syncComposer                    controllers.Admin.syncComposer
POST           /admin/syncComposer                    controllers.Admin.syncComposerPost

POST           /admin/sections                        controllers.Admin.addSection
DELETE         /admin/sections                        controllers.Admin.removeSection

POST           /admin/desks                           controllers.Admin.addDesk
DELETE         /admin/desks                           controllers.Admin.removeDesk

POST           /admin/assign                          controllers.Admin.assignSectionToDesk

# feature-switching based enpoinds
GET            /feature/:featureName                  controllers.Feature.featureSwitchToggle(featureName)
GET            /feature/:featureName/on               controllers.Feature.featureSwitchOn(featureName)
GET            /feature/:featureName/off              controllers.Feature.featureSwitchOff(featureName)

# shared secret auth test
GET            /sharedsecret/content                  controllers.Api.sharedAuthGetContent
GET            /sharedsecret/content/:id              controllers.Api.sharedAuthGetContentById(id)

# Management
GET            /management/healthcheck                controllers.Management.healthCheck

# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                          controllers.Assets.at(path="/public", file)
