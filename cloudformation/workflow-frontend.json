{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Workflow Frontend",
    "Conditions": {
        "NotPROD": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "Stage"
                        },
                        "PROD"
                    ]
                }
            ]
        },
        "IsPROD" : {
            "Fn::Equals": [
                {
                    "Ref": "Stage"
                },
                "PROD"
            ]
        }
    },
    "Mappings": {
        "WorkflowFrontendConfig": {
            "CODE": {
                "MinSize": 1,
                "MaxSize": 2,
                "DesiredCapacity": 1,
                "InstanceType": "m3.medium",
                "CloudfrontAliases": ["workflow.code.dev-gutools.co.uk"]
            },
            "PROD": {
                "MinSize": 3,
                "MaxSize": 6,
                "DesiredCapacity": 3,
                "InstanceType": "c3.large",
                "CloudfrontAliases": ["workflow.gutools.co.uk"]
            }
        }
    },
    "Parameters": {
        "KeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instance",
            "Type": "String",
            "Default": "workflow-developers"
        },
        "Stage": {
            "Description": "Environment name",
            "Type": "String",
            "AllowedValues": [
                "CODE",
                "PROD"
            ],
            "Default": "PROD"
        },
        "SSLCertificateId": {
            "Description": "ARN of the SSL certificate for workflow.gutools.co.uk",
            "Type": "String",
            "Default": "arn:aws:iam::753338109777:server-certificate/star.gutools.co.uk-exp2018-11-17"
        },
        "CloudFrontSSLCertificateId": {
            "Description": "The ServerCertificateId (not ARN) of the certificate for the CloudFront distribution (with /cloudfront/ path prefix)",
            "Type": "String"
        },
        "AMI": {
            "Description": "AMI for Workflow instances",
            "Type": "String"
        },
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        },
        "GithubTeamName": {
            "Description": "Name of github team to allow SSH access to",
            "Type": "String",
            "Default": "Editorial-Tools-SSHAccess"
        },
        "PrivateVpcSubnets": {
            "Description": "Subnets to use in VPC for private EC2 instances eg. subnet-abcd1234",
            "Type": "List<AWS::EC2::Subnet::Id>",
            "Default": "subnet-c2620fa7,subnet-2a37bd5d,subnet-2967c870"
        },
        "DatastoreLoadBalancerAccessSecurityGroup": {
            "Description": "The Workflow Data Store Security Group",
            "Type": "String"
        }
    },
    "Resources": {
        "DistributionInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "DistributionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::workflow-dist/*",
                                        "arn:aws:s3:::workflow-private/*",
                                        "arn:aws:s3:::pan-domain-auth-settings/*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "PushLogs",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": [
                                        "arn:aws:logs:*:*:*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "DescribeEC2Policy",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "EC2:Describe*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "GetTeamKeysPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "GetTeamKeysPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": ["s3:GetObject"],
                            "Resource": ["arn:aws:s3:::github-team-keys/*"]
                        },
                        {
                            "Effect":"Allow",
                            "Action": ["s3:ListBucket"],
                            "Resource":"arn:aws:s3:::github-team-keys"
                        }
                    ]
                },
                "Roles": [{"Ref": "DistributionRole"}]
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "GuardianIP"
                        }
                    }
                ]
            }
        },
        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application servers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "CidrIp": {
                            "Ref": "GuardianIP"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                            "SourceSecurityGroupName": {
                            "Fn::GetAtt": [
                                "WorkflowFrontendLoadBalancer",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "WorkflowFrontend application load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WorkflowFrontendLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "SSLCertificateId"
                        }
                    }
                ],
                "HealthCheck": {
                    "Target": "HTTP:9000/management/healthcheck",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "2",
                    "Interval": "10",
                    "Timeout": "5"
                },
                "AccessLoggingPolicy": {
                    "EmitInterval": 5,
                    "Enabled": true,
                    "S3BucketName": "workflow-logs",
                    "S3BucketPrefix": {
                        "Ref": "Stage"
                    }
                }
            }
        },
        "WorkflowFrontendAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    "eu-west-1c",
                    "eu-west-1a",
                    "eu-west-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "WorkflowFrontendLaunchConfig"
                },
                "MinSize": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "MinSize"
                    ]
                },
                "MaxSize": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "MaxSize"
                    ]
                },
                "DesiredCapacity": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "DesiredCapacity"
                    ]
                },
                "Cooldown": "180",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    {
                        "Ref": "WorkflowFrontendLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": {
                            "Ref": "Stage"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": "workflow",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": "workflow-frontend",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "WorkflowFrontendScheduledActionUp": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Condition": "NotPROD",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "WorkflowFrontendAutoscalingGroup"
                },
                "MinSize": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "MinSize"
                    ]
                },
                "MaxSize": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "MaxSize"
                    ]
                },
                "DesiredCapacity": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "DesiredCapacity"
                    ]
                },
                "Recurrence": "30 06 * * *"
            }
        },
        "WorkflowFrontendScheduledActionDown": {
            "Type": "AWS::AutoScaling::ScheduledAction",
            "Condition": "NotPROD",
            "Properties": {
                "AutoScalingGroupName": {
                    "Ref": "WorkflowFrontendAutoscalingGroup"
                },
                "MaxSize": "0",
                "MinSize": "0",
                "DesiredCapacity": "0",
                "Recurrence": "00 00 * * *"
            }
        },
        "WorkflowFrontendLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Authentication": {
                    "distributionAuthentication": {
                        "type": "S3",
                        "roleName": {
                            "Ref": "DistributionRole"
                        },
                        "buckets": [
                            "workflow-dist"
                        ]
                    }
                },
                "AWS::CloudFormation::Init": {
                    "config": {
                        "users": {
                            "workflow": {
                                "homeDir": "/home/workflow"
                            }
                        },
                        "files": {
                            "/home/workflow/workflow-frontend/conf/application.defaults.conf": {
                                "source": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "https://s3-eu-west-1.amazonaws.com/workflow-private/",
                                            {
                                                "Ref": "Stage"
                                            },
                                            "/workflow-frontend/application.defaults.conf"
                                        ]
                                    ]
                                },
                                "authentication": "distributionAuthentication"
                            },
                            "/etc/gu/workflow-keys.conf": {
                                "source": "https://s3-eu-west-1.amazonaws.com/workflow-private/keys.conf",
                                "authentication": "distributionAuthentication"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "AMI"
                },
                "SecurityGroups": [
                    {
                        "Ref": "AppServerSecurityGroup"
                    },
                    {
                        "Ref": "SSHSecurityGroup"
                    },
                    {
                        "Ref": "DatastoreLoadBalancerAccessSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Fn::FindInMap": [
                        "WorkflowFrontendConfig",
                        {
                            "Ref": "Stage"
                        },
                        "InstanceType"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "DistributionInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ev\n",
                                "apt-get -y update\n",
                                "apt-get -y upgrade\n",
                                { "Fn::Join": [ "", ["/opt/features/ssh-keys/initialise-keys-and-cron-job.sh -l -b github-team-keys -t ", {"Ref":"GithubTeamName"}, "|| true \n"] ] },
                                "/opt/features/native-packager/install.sh -b workflow-dist -a workflow-frontend -t tgz\n",

                                "cfn-init -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r WorkflowFrontendLaunchConfig ",
                                "  --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                " || error_exit 'Failed to run cfn-init'\n",
                                "sed -i \\\n",
                                "    -e 's,@STAGE@,'$stage',g' \\\n",
                                "    /home/workflow/workflow-frontend/conf/logger.conf\n",
                                "start workflow-frontend\n"
                            ]
                        ]
                    }
                }
            }
        },
        "WorkflowFrontendGroup": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "Policies": [
                    {
                        "PolicyName": "WorkflowFrontendGroup-Policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sqs:DeleteMessage",
                                        "sqs:ReceiveMessage"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeTags",
                                        "cloudwatch:PutMetricData"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "WorkflowFrontendUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Groups": [
                    {
                        "Ref": "WorkflowFrontendGroup"
                    }
                ]
            }
        },
        "WorkflowFrontendKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "WorkflowFrontendUser"
                }
            }
        },
        "WorkflowFrontendCloudfront": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Aliases": {
                        "Fn::FindInMap": [
                            "WorkflowFrontendConfig",
                            {
                                "Ref": "Stage"
                            },
                            "CloudfrontAliases"
                        ]
                    },
                    "Origins": [
                        {
                            "CustomOriginConfig": {
                                "HTTPSPort": "443",
                                "OriginProtocolPolicy": "https-only"
                            },
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "WorkflowFrontendLoadBalancer",
                                    "DNSName"
                                ]
                            },
                            "Id": "workflow-frontend"
                        }
                    ],
                    "DefaultCacheBehavior": {
                        "AllowedMethods": [
                            "DELETE",
                            "GET",
                            "HEAD",
                            "OPTIONS",
                            "PATCH",
                            "POST",
                            "PUT"
                        ],
                        "Compress": true,
                        "ForwardedValues": {
                            "Headers": [
                                "*"
                            ],
                            "QueryString": true,
                            "Cookies": {
                                "Forward": "all"
                            }
                        },
                        "TargetOriginId": "workflow-frontend",
                        "ViewerProtocolPolicy": "redirect-to-https"
                    },
                    "CacheBehaviors": [
                        {
                            "PathPattern": "assets/*",
                            "Compress": true,
                            "ForwardedValues": {
                                "QueryString": false,
                                "Headers": [
                                    "Host"
                                ]
                            },
                            "TargetOriginId": "workflow-frontend",
                            "ViewerProtocolPolicy": "redirect-to-https"
                        }
                    ],
                    "PriceClass": "PriceClass_All",
                    "Enabled": "true",
                    "ViewerCertificate": {
                        "IamCertificateId": {
                            "Ref": "CloudFrontSSLCertificateId"
                        },
                        "MinimumProtocolVersion": "TLSv1",
                        "SslSupportMethod": "sni-only"
                    }
                }
            }
        }
    },
    "Outputs": {
        "WorkflowFrontendLoadBalancerDNS": {
            "Description": "Load balancer DNS",
            "Value": {
                "Fn::GetAtt": [
                    "WorkflowFrontendLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "WorkflowFrontendCloudfrontDNS": {
            "Description": "Cloudfront DNS",
            "Value": {
                "Fn::GetAtt": [
                    "WorkflowFrontendCloudfront",
                    "DomainName"
                ]
            }
        }
    }
}
